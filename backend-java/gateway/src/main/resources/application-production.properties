# Production Configuration for API Gateway

# Server Configuration
server.port=${PORT:8080}
server.servlet.context-path=/

# Reverse-proxy awareness for Render
server.forward-headers-strategy=framework
server.use-forward-headers=true

# Database Configuration - Set via environment variables in Render
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Database SSL (required for Render)
spring.datasource.hikari.data-source-properties.sslmode=require

# Connection pooling (important for free Postgres)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2

# Gateway Configuration
spring.cloud.gateway.discovery.locator.enabled=${GATEWAY_DISCOVERY_ENABLED:false}
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Gateway startup configuration
spring.cloud.gateway.error.include-message=always
spring.cloud.gateway.error.include-binding-errors=always

# WebSocket support
spring.cloud.gateway.routes[0].id=websocket-route
spring.cloud.gateway.routes[0].uri=ws://chat-service:8080
spring.cloud.gateway.routes[0].predicates[0]=Path=/ws/**

# Manual routes for services with actual Render URLs
spring.cloud.gateway.routes[1].id=chat-service
spring.cloud.gateway.routes[1].uri=https://chat-service-5gjq.onrender.com
spring.cloud.gateway.routes[1].predicates[0]=Path=/chat/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[2].id=tech-dashboard
spring.cloud.gateway.routes[2].uri=https://tech-dashboard-service.onrender.com
spring.cloud.gateway.routes[2].predicates[0]=Path=/tech-dashboard/**
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=2

spring.cloud.gateway.routes[3].id=dealer-service
spring.cloud.gateway.routes[3].uri=https://dealer-service-v3ir.onrender.com
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/dealers/**
# No StripPrefix - dealer service expects full /api/dealers path

spring.cloud.gateway.routes[4].id=technician-service
spring.cloud.gateway.routes[4].uri=https://technician-service.onrender.com
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/technicians/**
# No StripPrefix - technician service expects full /api/technicians path

spring.cloud.gateway.routes[5].id=postings-service
spring.cloud.gateway.routes[5].uri=https://postings-service.onrender.com
spring.cloud.gateway.routes[5].predicates[0]=Path=/api/v1/**
spring.cloud.gateway.routes[5].filters[0]=StripPrefix=2
# Debug: /api/v1/posts-by-email -> StripPrefix=2 -> /posts-by-email

# CORS is now handled by CorsHeaderFilter.java
# Remove properties-based CORS to prevent conflicts

# Eureka Server Configuration
eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:https://service-registry.onrender.com/eureka/}
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=${HOSTNAME:localhost}

# Eureka client configuration for better reliability
eureka.client.registry-fetch-interval-seconds=30
eureka.client.eureka-server-connect-timeout-seconds=20
eureka.client.eureka-server-read-timeout-seconds=20
eureka.client.initial-instance-info-replication-interval-seconds=40
eureka.client.instance-info-replication-interval-seconds=30
eureka.client.heartbeat-executor-thread-pool-size=2
eureka.client.cache-refresh-executor-thread-pool-size=2

# Disable Eureka to prevent startup issues (using manual routes instead)
eureka.client.enabled=false
eureka.client.fetch-registry=false
eureka.client.register-with-eureka=false

# Logging Configuration
logging.level.root=INFO
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.web=INFO

# Actuator Configuration - Enable health endpoint for Render
management.endpoints.web.exposure.include=health,info,gateway
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/actuator
management.server.port=${PORT:8080}

# Health check endpoint - Simplified for Render
management.health.db.enabled=false
management.health.diskspace.enabled=true
management.health.ping.enabled=true
management.endpoint.health.probes.enabled=true

# Security Headers
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
