# Production Configuration for API Gateway

# Server Configuration
server.port=${PORT:8080}
server.servlet.context-path=/

# Reverse-proxy awareness for Render
server.forward-headers-strategy=framework
server.use-forward-headers=true

# Database Configuration (will be overridden by environment variables)
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Database SSL (required for Render)
spring.datasource.hikari.data-source-properties.sslmode=require

# Connection pooling (important for free Postgres)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2

# Gateway Configuration
spring.cloud.gateway.discovery.locator.enabled=${GATEWAY_DISCOVERY_ENABLED:false}
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Gateway startup configuration
spring.cloud.gateway.default-filters=AddRequestHeader=X-Gateway-Open,true
spring.cloud.gateway.error.include-message=always
spring.cloud.gateway.error.include-binding-errors=always

# WebSocket support
spring.cloud.gateway.routes[0].id=websocket-route
spring.cloud.gateway.routes[0].uri=ws://chat-service:8080
spring.cloud.gateway.routes[0].predicates[0]=Path=/ws/**
spring.cloud.gateway.routes[0].filters[0]=AddRequestHeader=X-Gateway-Open,true

# Manual routes for services (since Eureka discovery might not work properly in Render)
spring.cloud.gateway.routes[1].id=chat-service
spring.cloud.gateway.routes[1].uri=https://chat-service.onrender.com
spring.cloud.gateway.routes[1].predicates[0]=Path=/chat/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[2].id=tech-dashboard
spring.cloud.gateway.routes[2].uri=https://tech-dashboard-service.onrender.com
spring.cloud.gateway.routes[2].predicates[0]=Path=/tech-dashboard/**
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[3].id=dealer-service
spring.cloud.gateway.routes[3].uri=https://dealer-service.onrender.com
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/dealers/**
spring.cloud.gateway.routes[3].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[4].id=technician-service
spring.cloud.gateway.routes[4].uri=https://technician-service.onrender.com
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/technicians/**
spring.cloud.gateway.routes[4].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[5].id=postings-service
spring.cloud.gateway.routes[5].uri=https://postings-service.onrender.com
spring.cloud.gateway.routes[5].predicates[0]=Path=/api/v1/**
spring.cloud.gateway.routes[5].filters[0]=StripPrefix=1

# CORS Configuration (Gateway-only as per project rules)
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins=${FRONTEND_ORIGIN:https://dealer-frontend-iwor.onrender.com,https://dealer-frontend.onrender.com}
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true

# Eureka Server Configuration
eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:https://service-registry.onrender.com/eureka/}
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=${HOSTNAME:localhost}

# Eureka client configuration for better reliability
eureka.client.registry-fetch-interval-seconds=30
eureka.client.eureka-server-connect-timeout-seconds=20
eureka.client.eureka-server-read-timeout-seconds=20
eureka.client.initial-instance-info-replication-interval-seconds=40
eureka.client.instance-info-replication-interval-seconds=30
eureka.client.heartbeat-executor-thread-pool-size=2
eureka.client.cache-refresh-executor-thread-pool-size=2

# Disable Eureka if it's not available (fallback to manual routes)
eureka.client.enabled=${EUREKA_CLIENT_ENABLED:true}
eureka.client.fetch-registry=${EUREKA_CLIENT_FETCH_REGISTRY:false}
eureka.client.register-with-eureka=${EUREKA_CLIENT_REGISTER_WITH_EUREKA:false}

# Logging Configuration
logging.level.root=INFO
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.web=INFO

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,gateway
management.endpoint.health.show-details=when-authorized
management.endpoints.web.base-path=/actuator

# Health check endpoint
management.health.db.enabled=true
management.health.diskspace.enabled=true

# Security Headers
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
