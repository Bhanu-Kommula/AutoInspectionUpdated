# Production Configuration for AutoInspect Services

# Server Configuration - Use Render's dynamic PORT
server.port=${PORT:8080}
server.servlet.context-path=/

# Reverse-proxy awareness for Render
server.forward-headers-strategy=framework
server.use-forward-headers=true

# Database Configuration - Build JDBC URL from separate variables
# This will be set by the Docker container startup script
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Database SSL (required for Render)
spring.datasource.hikari.data-source-properties.sslmode=require

# Connection pooling (important for free Postgres)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# JPA Configuration - Allow Flyway to run first, then validate
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
# Remove explicit dialect - let Hibernate auto-detect
spring.jpa.properties.hibernate.format_sql=true
# Allow Flyway to handle schema creation
spring.jpa.properties.hibernate.hbm2ddl.auto=none
spring.jpa.properties.hibernate.hbm2ddl.halt_on_error=false

# Flyway Configuration - Ensure migrations run
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.validate-on-migrate=true
spring.flyway.clean-disabled=true
# Allow Flyway to run even if some tables exist
spring.flyway.ignore-migration-patterns=*:missing

# Eureka Client Configuration - Use service registry directly
eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:https://service-registry.onrender.com/eureka/}
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=${HOSTNAME:localhost}
# Ensure proper registration
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.healthcheck.enabled=true

# Logging Configuration
logging.level.root=INFO
logging.level.com.auto=INFO
logging.level.org.springframework.web=INFO
logging.level.org.flywaydb=INFO
logging.level.com.netflix.discovery=INFO

# CORS Configuration (handled by API Gateway)
spring.web.cors.allowed-origins=*

# Security Configuration
spring.security.basic.enabled=false

# Actuator Configuration - Optimized for Render health checks
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=never
management.endpoints.web.base-path=/actuator
# Ensure health check responds quickly
management.health.defaults.enabled=true
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.eureka.enabled=true

# Startup optimization for Render
spring.main.lazy-initialization=false
spring.main.web-application-type=servlet
# Ensure health check is available immediately
management.health.probes.enabled=true
management.health.probes.readiness-state=READY

# NO SECURITY - Disable all security features
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.http-only=false
